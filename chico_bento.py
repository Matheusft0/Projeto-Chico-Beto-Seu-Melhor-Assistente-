# -*- coding: utf-8 -*-
"""CHICO BENTO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sg6Yh_KO_zRAocgHG3rzrZ5EK8PqzZNV
"""

# 1. Instalar libs necessárias
!pip install -q gspread pandas google-genai
!pip install -U google-generativeai

# 2. Importar bibliotecas e autenticar (específico para Google Colab)
import pandas as pd
import gspread
import os
from datetime import datetime
import re # Importando a biblioteca de expressões regulares

# Bibliotecas para autenticação e segredos no Google Colab
from google.colab import auth
from google.auth import default
from google.colab import userdata # Para acessar os 'secrets' do Colab

# Autenticação do usuário no Colab
try:
    auth.authenticate_user()
    creds, _ = default()
    gc = gspread.authorize(creds)
except Exception as e:
    print(f"Chico Beto: Ih, deu chabu na hora de conectá com as planilha do Google, sô: {e}")
    print("Chico Beto: Quem cuida de mim precisa dar uma olhada nisso pra eu poder te ajudar.")
    exit()

# Carregar a planilha
# Substitua pelo ID da sua planilha. Certifique-se que ela existe e você tem acesso.
spreadsheet_id = "(ID) da sua Planilha" # MANTENHA O ID FORNECIDO PELO USUÁRIO
df = pd.DataFrame() # Inicializa df vazio para o caso de falha no carregamento

try:
    spreadsheet = gc.open_by_key(spreadsheet_id)
    sheet = spreadsheet.sheet1 # Assume que a primeira aba (sheet1) é a desejada
    data = sheet.get_all_records(numericise_ignore=['Nota', 'Preço'])
    if data:
        df = pd.DataFrame(data)
        print("Chico Beto: Ô trem bão! Meu caderninho de produto tá carregado e pronto pra consulta, sô!")

        for col in ['Nome', 'Descrição', 'Marca', 'Localização']:
            if col in df.columns:
                df[col] = df[col].astype(str).str.strip()

        if 'Preço' in df.columns:
            df['Preço'] = df['Preço'].astype(str).str.replace('R$', '', regex=False).str.replace(',', '.', regex=False).str.strip()
            df['Preço'] = pd.to_numeric(df['Preço'], errors='coerce')

        if 'Nota' in df.columns:
            df['Nota'] = df['Nota'].astype(str).str.replace(',', '.', regex=False).str.strip()
            df['Nota'] = pd.to_numeric(df['Nota'], errors='coerce')

        if 'Quantidade' in df.columns:
            df['Quantidade'] = pd.to_numeric(df['Quantidade'], errors='coerce').fillna(0).astype(int)
    else:
        print("Chico Beto: Uai, parece que meu caderninho de produto tá em branco ou deu chabu pra carregar.")
except gspread.exceptions.SpreadsheetNotFound:
    print(f"Chico Beto: Uai, num achei o caderninho com as anotação (planilha com ID '{spreadsheet_id}'). Quem cuida de mim precisa conferir se o número tá certo e se eu posso bisbilhotar ela.")
    exit()
except Exception as e:
    print(f"Chico Beto: Uai, deu um revertério aqui pra carregar meu caderninho de produto: {e}")
    exit()

# 3. Inicializar Google Gemini
import google.generativeai as genai

GOOGLE_API_KEY = None
try:
    GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
    genai.configure(api_key=GOOGLE_API_KEY)
except userdata.SecretNotFoundError:
    print("Chico Beto: Ih, cumpadi! Parece que o fio da minha sabedoria artifiçá (API Key do Gemini) tá desligado.")
    print("Chico Beto: Sem ela, num consigo te dar aquelas explicação caprichada. Quem cuida de mim precisa dar um jeitinho nisso pra eu poder te ajudar com tudo, tá bom?")
    exit()
except Exception as e:
    print(f"Chico Beto: Vixe Maria! Deu um pipoco aqui na hora de ligar minha sabedoria artifiçá: {e}. Num vou conseguir te ajudar com as pergunta mais difícil hoje, sô.")
    exit()

MODEL_ID = "gemini-1.5-flash-latest"

# 4. Procurar produto na planilha
def buscar_produto(nome_produto_busca):
    if df.empty:
        return None

    if 'Nome' not in df.columns:
        print("Chico Beto: Ih, cumpadi, meu caderninho tá esquisito, faltou a parte dos 'Nome' dos produto!")
        return None

    nome_lower = str(nome_produto_busca).lower().strip()
    if not nome_lower:
        return None

    nomes_planilha_lower = df['Nome'].astype(str).str.lower()
    resultados = df[nomes_planilha_lower.str.contains(nome_lower, na=False)]

    if resultados.empty:
        return None
    else:
        produtos_encontrados = []
        for _, linha in resultados.iterrows():
            produto_info = {
                "produto": linha.get('Nome', 'Nome não disponível'),
                "descricao": linha.get('Descrição', 'Descrição não disponível'),
                "marca": linha.get('Marca', 'Marca não disponível'),
                "preco": linha.get('Preço', 'Preço não informado'),
                "nota": linha.get('Nota', 'Nota não informada'),
                "quantidade": linha.get('Quantidade', 0),
                "localizacao": linha.get('Localização', 'Localização não disponível')
            }
            produtos_encontrados.append(produto_info)
        return produtos_encontrados

# 5. Salvar produto em falta direto na planilha
def salvar_faltantes_na_planilha(nome_produto_faltante):
    try:
        nome_aba_faltantes = "Faltantes"
        headers_faltantes = ["Produto", "Data"]

        try:
            aba_faltantes = spreadsheet.worksheet(nome_aba_faltantes)
        except gspread.exceptions.WorksheetNotFound:
            print(f"Chico Beto: Num achei a aba '{nome_aba_faltantes}' pra anotar os faltante, vou criar uma nova pra nóis...")
            aba_faltantes = spreadsheet.add_worksheet(title=nome_aba_faltantes, rows="1", cols=len(headers_faltantes))
            aba_faltantes.append_row(headers_faltantes)

        registros = aba_faltantes.get_all_records()
        nomes_existentes = []
        if registros:
            nomes_existentes = [str(registro.get("Produto", "")).lower() for registro in registros if registro.get("Produto")]

        if str(nome_produto_faltante).lower() not in nomes_existentes:
            data_atual = datetime.now().strftime("%d/%m/%Y %H:%M")
            aba_faltantes.append_row([nome_produto_faltante, data_atual])
            print(f"Chico Beto: Anotei '{nome_produto_faltante}' lá na planilha dos faltantes, visse? Data: {data_atual}")
        else:
            print(f"Chico Beto: Esse '{nome_produto_faltante}' já tava anotado nos faltantes, uai!")
    except Exception as e:
        print(f"Chico Beto: Num consegui salvar o produto '{nome_produto_faltante}' nos faltantes não, deu erro: {e}")

# Função para extrair o nome do produto da pergunta do usuário
def extrair_nome_produto_com_gemini(pergunta_cliente):
    try:
        prompt_extracao = (
            f"Analise a pergunta de um cliente de supermercado: '{pergunta_cliente}'. "
            f"Qual é o nome do produto principal que o cliente está procurando? "
            f"Responda APENAS com o nome do produto. Por exemplo, se a pergunta for 'onde tem sabão em pó azul da marca Xyz?', responda 'sabão em pó azul da marca Xyz'. "
            f"Se for 'preço do café torrado', responda 'café torrado'. Se for 'biscoito', responda 'biscoito'."
            f"Se for 'tem pão?', responda 'pão'."
        )
        model_extracao = genai.GenerativeModel(MODEL_ID)
        response = model_extracao.generate_content(contents=prompt_extracao)
        if response and response.text:
            nome_produto_extraido = response.text.strip().replace('"', '').replace("'", "")
            return nome_produto_extraido
        else:
            print("Chico Beto: Hum, num tô entendendo direitinho qual produto vosmecê qué... Pode explicar de novo?")
            return None
    except Exception as e:
        print(f"Chico Beto: Vixe! Deu um nó na minha cabeça tentando entender o produto. Tenta de novo, por favorzinho.")
        return None

# 6. Consultar remédio ou produto com o Chico Bento (Gemini)
def consultar_produto_chico(descricao_usuario_original):
    print(f"Chico Beto: Deixa eu entendê o que vosmecê qué sabê sobre '{descricao_usuario_original}'...")
    nome_produto_foco = extrair_nome_produto_com_gemini(descricao_usuario_original)

    if not nome_produto_foco:
        return

    produto_encontrado_na_planilha = False
    resultados_planilha = None

    if not df.empty:
        print(f"\nChico Beto: Conferindo aqui no meu caderninho se tem '{nome_produto_foco}'...")
        print("\n")
        resultados_planilha = buscar_produto(nome_produto_foco)

        if resultados_planilha:
            produto_encontrado_na_planilha = True
            print(f"Chico Beto: Óia só o que eu achei sobre '{nome_produto_foco}' aqui no estoque:")
            print("\n")
            for item in resultados_planilha:
                print(f"  -> Produto: {item['produto']}")
                if item['marca'] and str(item['marca']).lower() != 'marca não disponível':
                    print(f"     Marca: {item['marca']}")
                if item['descricao'] and str(item['descricao']).lower() != 'descrição não disponível':
                    print(f"     O que é: {item['descricao']}")

                preco_item = item.get('preco')
                if pd.notna(preco_item) and str(preco_item).lower() != 'preço não informado':
                    try:
                        preco_formatado = f"{float(preco_item):.2f}".replace('.', ',')
                        print(f"     Quanto custa: R$ {preco_formatado}")
                    except (ValueError, TypeError):
                        print(f"     Quanto custa: {preco_item}")

                quantidade_item = item.get('quantidade', 0)
                try:
                    qtd_num = int(quantidade_item)
                    print(f"     Quantos tem no estoque: {qtd_num}")
                    if 0 <= qtd_num <= 10:
                        print("     Chico Beto Alerta: Corre que tá acabando, sô!")
                except (ValueError, TypeError):
                    print(f"     Quantos tem no estoque: {quantidade_item} (num deu pra contar direito)")

                nota_item = item.get('nota')
                if pd.notna(nota_item) and str(nota_item).lower() != 'nota não informada':
                    try:
                        nota_float = float(nota_item)
                        if nota_float > 5.0:
                            nota_float /= 10.0

                        nota_formatada = f"{nota_float:.1f}".replace('.', ',')
                        print(f"     Nota do povo: {nota_formatada} de 5 estrela")
                    except (ValueError, TypeError):
                         print(f"     Nota do povo: {nota_item}")

                if item['localizacao'] and str(item['localizacao']).lower() != 'localização não disponível':
                    print(f"     Onde que tá guardado: {item['localizacao']}")
                print("     --------------------")
        else:
            print(f"Chico Beto: Ih, '{nome_produto_foco}' num achei aqui no meu controle do armazém não, viu.")
    else:
        print("\nChico Beto: Meu caderninho de produto num tá aqui ou tá vazio, num consigo conferir o estoque, cumpadi.")

    # Consultar Gemini para informações adicionais
    print(f"\nChico Beto: Agora, deixa eu perguntar pra sabedoria artifiçá sobre '{nome_produto_foco}'...")

    prompt_especifico_produto = ""
    e_cafe = "café" in nome_produto_foco.lower()
    if not e_cafe and resultados_planilha:
        e_cafe = any("café" in str(item['produto']).lower() for item in resultados_planilha)

    if e_cafe:
        prompt_especifico_produto = (
            f"Conte uma curiosidade bem da roça sobre café, ou dê uma dica de como passar um cafézim bão que nem o da vovó. "
            f"Se o amigo perguntou sobre '{nome_produto_foco}', fale sobre ele primeiro, e depois emende com a dica ou causo do café."
        )
    else:
        prompt_especifico_produto = (
            f"Fale mais sobre '{nome_produto_foco}', pra que serve, se é bão mesmo, curiosidades ou dicas de uso."
        )

    prompt_chico = (
        f"Imagina que você é o Chico Bento, um caipira muito gente boa e prestativo.\n"
        f"Um amigo seu perguntou sobre '{nome_produto_foco}'.\n"
        f"Se o item foi encontrado no estoque da loja (planilha), você já informou os detalhes do estoque (nome, marca, descrição, preço, quantidade, nota, localização) e se está acabando.\n"
        f"{prompt_especifico_produto}\n"
        f"Use um linguajar bem matuto, com expressões típicas, mas que seja fácil de entender e carinhoso.\n"
        f"Organize a resposta em tópicos simples. Para cada tópico, comece com um emoji que combine com o assunto e com seu jeitinho caipira (por exemplo, 🤠, 👍, 💡, 😋, 🌽, 👵, 🤔), em vez de usar asteriscos ou negrito para destacar os títulos dos tópicos."
    )

    try:
        model_consulta = genai.GenerativeModel(MODEL_ID)
        response_consulta = model_consulta.generate_content(contents=prompt_chico)

        if response_consulta and response_consulta.text:
            # MODIFICAÇÃO AQUI: Remover os asteriscos (**) da prosa do Chico
            prosa_do_chico = response_consulta.text.replace('**', '')
            print("\n--- Prosa do Chico Bento (com uma ajudinha da inteligência artifiçá) ---")
            print(prosa_do_chico) # Imprime a prosa já sem os asteriscos
            print("---------------------------------------------------------------------")
        else:
            print(f"Chico Beto: Óia, procurei, procurei, mas num achei nada sobre '{nome_produto_foco}' pra te contá agora, sô.")
    except Exception as e:
        print(f"Chico Beto: Rapaz, deu um treco esquisito na hora de consultar a sabedoria artifiçá: {e}")

    if not produto_encontrado_na_planilha and not df.empty:
        print(f"\nChico Beto: Como num achei '{nome_produto_foco}' aqui no estoque, vou anotar pra gente num esquecê de mercar depois, tá?")
        salvar_faltantes_na_planilha(nome_produto_foco)


# 7. Loop de interação com o cliente
def iniciar_conversa_chico():
    print("\n========================================================")
    print("Chico Beto: Olá, cumpadi! Sou o Chico Beto, seu mió assistente nas hora das compra!")
    print("Chico Beto: Pode perguntá o que precisá que eu dou um jeito de ajudá ou orientá, tá bom?")
    print("Chico Beto: Se quisé encerrá a prosa, é só falá 'sair', 'tchau' ou 'não, obrigado'.")
    print("========================================================")

    if df.empty:
        return

    if not GOOGLE_API_KEY:
        return

    while True:
        entrada_usuario = input("\nVocê: ").strip()

        if not entrada_usuario:
            continue

        palavras_de_saida = ["sair", "tchau", "nada", "não", "nao", "obrigado", "xau", "ate mais", "até mais", "brigado"]
        if any(palavra_saida in entrada_usuario.lower() for palavra_saida in palavras_de_saida):
            print("Chico Beto: Inté mais ver então, cumpadi! Fico felizão de ajudá e amo ser seu assistente aqui. Vorta sempre que precisá, viu?!")
            break

        consultar_produto_chico(entrada_usuario)
        print("\nChico Beto: Precisa de mais alguma coisa, cumpadi?")

# Inicia a conversa quando o script é executado
if __name__ == '__main__':
    iniciar_conversa_chico()
